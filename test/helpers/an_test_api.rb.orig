require 'rack/test'

module AN
  module Test
    module API
      def included (into)
        into.include Minitest::Assertions
        into.extend ClassMethods
      end

      module ClassMethods
      end

      def app
        @app ||= RackApp.new
      end

      %w{ get post put delete options }.each do |method|
        define_method(method) do |path, params={}, headers={}|
          response = app.send(method, path, params, headers)
          RackResponse.new(response)
        end
      end

      class RackApp
        include Rack::Test::Methods
        def app (version='v1')
          AN.const_get(version.upcase)
        end
      end

      class RackResponse
        attr_reader :response
#        delegate :status, :headers, to: :response #TODO megn√©zni, mi a gond a delegate-tel!
        def initialize (response)
          @response = response
        end

        def json
          @json ||= @response.body.empty? ? nil : JSON.parse(@response.body)
        end
      end
    end
  end
end

=begin
ENV['RACK_ENV'] = 'test'

require 'grape'
require 'json'
require 'minitest'
require 'minitest/autorun'
require 'rack/test'
require 'logger'
require_relative '../lib/an'
require_relative '../config/environment'

Grape::API.logger = Logger.new('/dev/null')


class ApiTest < Minitest::Test

  attr_accessor :rack_test

  def initialize test_name
    self.rack_test = ::ApiTest::RackTest.new
  end

  %w(get post put delete).each do |method|
    define_method(method) do |path, params={}, headers={}|
      JsonResponse.new(rack_test.send(method, path, params, headers))
    end
  end

  class RackTest
    include Rack::Test::Methods

    def app
      AN::API::V1
    end
  end

  class JsonResponse
    attr_reader :response
    delegate :status, :headers, to: :response

    def initialize(response)
      @response = response
    end

    def body
      @body ||= begin
        @response.body.empty?? @response.body : JSON.parse(@response.body)
      end
    end
  end
end

class AnTest < ApiTest

  def setup
    Ohm.redis = Redic.new("redis://127.0.0.1:6379")
    Ohm.redis.call("FLUSHALL")
    AN.initialize!
    @client = ApiTest.new 'assist-network-test'
  end

  def test_valami
    assert 'valami', 'valami'
  end




end
=end